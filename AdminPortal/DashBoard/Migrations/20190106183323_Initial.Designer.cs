// <auto-generated />
using DashBoard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DashBoard.Migrations
{
    [DbContext(typeof(AdminDatabaseContext))]
    [Migration("20190106183323_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DashBoard.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BlockId")
                        .IsRequired();

                    b.Property<bool>("IsRented");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("DashBoard.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaName");

                    b.Property<int?>("CityId")
                        .IsRequired();

                    b.HasKey("AreaId");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DashBoard.Models.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PresidentId");

                    b.Property<int?>("SecretaryId");

                    b.HasKey("Id");

                    b.HasIndex("PresidentId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Associations");
                });

            modelBuilder.Entity("DashBoard.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("BlockNames");
                });

            modelBuilder.Entity("DashBoard.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName");

                    b.Property<int?>("StateId")
                        .IsRequired();

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DashBoard.Models.Community", b =>
                {
                    b.Property<int>("CommunityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubAreaId");

                    b.HasKey("CommunityId");

                    b.HasIndex("AssociationId")
                        .IsUnique()
                        .HasFilter("[AssociationId] IS NOT NULL");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("DashBoard.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApartmentId")
                        .IsRequired();

                    b.Property<int?>("AssociationId");

                    b.Property<int?>("AssociationId1");

                    b.Property<string>("Email");

                    b.Property<bool>("IsAssociationMember");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("PhoneNumber2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("AssociationId");

                    b.HasIndex("AssociationId1");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DashBoard.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<string>("StateName");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DashBoard.Models.SubArea", b =>
                {
                    b.Property<int>("SubAreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaId")
                        .IsRequired();

                    b.Property<string>("SubAreaName");

                    b.HasKey("SubAreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("SubAreas");
                });

            modelBuilder.Entity("DashBoard.Models.Apartment", b =>
                {
                    b.HasOne("DashBoard.Models.Block", "Block")
                        .WithMany("Apartments")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Area", b =>
                {
                    b.HasOne("DashBoard.Models.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Association", b =>
                {
                    b.HasOne("DashBoard.Models.Member", "President")
                        .WithMany()
                        .HasForeignKey("PresidentId");

                    b.HasOne("DashBoard.Models.Member", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId");
                });

            modelBuilder.Entity("DashBoard.Models.Block", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("BlockNames")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.City", b =>
                {
                    b.HasOne("DashBoard.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Community", b =>
                {
                    b.HasOne("DashBoard.Models.Association", "Association")
                        .WithOne("Community")
                        .HasForeignKey("DashBoard.Models.Community", "AssociationId");

                    b.HasOne("DashBoard.Models.SubArea", "SubArea")
                        .WithMany("Communities")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Member", b =>
                {
                    b.HasOne("DashBoard.Models.Apartment", "Apartment")
                        .WithMany("Members")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DashBoard.Models.Association")
                        .WithMany("AssociationMembers")
                        .HasForeignKey("AssociationId");

                    b.HasOne("DashBoard.Models.Association")
                        .WithMany("Treasurers")
                        .HasForeignKey("AssociationId1");
                });

            modelBuilder.Entity("DashBoard.Models.SubArea", b =>
                {
                    b.HasOne("DashBoard.Models.Area", "Area")
                        .WithMany("SubAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
