// <auto-generated />
using DashBoard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DashBoard.Migrations
{
    [DbContext(typeof(AdminDatabaseContext))]
    [Migration("20180112202840_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DashBoard.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApartmentName");

                    b.Property<string>("City");

                    b.Property<int?>("GateKeeperForeignKey");

                    b.Property<string>("LocationOrArea");

                    b.Property<int?>("PersonalHelperForeignKey");

                    b.Property<string>("Phone");

                    b.Property<string>("PinCode");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<int?>("VendorForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("GateKeeperForeignKey")
                        .IsUnique()
                        .HasFilter("[GateKeeperForeignKey] IS NOT NULL");

                    b.HasIndex("PersonalHelperForeignKey")
                        .IsUnique()
                        .HasFilter("[PersonalHelperForeignKey] IS NOT NULL");

                    b.HasIndex("VendorForeignKey")
                        .IsUnique()
                        .HasFilter("[VendorForeignKey] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DashBoard.Models.AmcItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey");

                    b.ToTable("AmcItems");
                });

            modelBuilder.Entity("DashBoard.Models.Amenety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey");

                    b.ToTable("Ameneties");
                });

            modelBuilder.Entity("DashBoard.Models.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("PresidentId");

                    b.Property<int?>("SecretaryId");

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey")
                        .IsUnique()
                        .HasFilter("[CommunityForeignKey] IS NOT NULL");

                    b.HasIndex("PresidentId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Associations");
                });

            modelBuilder.Entity("DashBoard.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("DashBoard.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("SectionForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("SectionForeignKey");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("DashBoard.Models.Flat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BlockForeignKey");

                    b.Property<bool>("IsRented");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("BlockForeignKey");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("DashBoard.Models.GateKeeper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey");

                    b.ToTable("GateKeepers");
                });

            modelBuilder.Entity("DashBoard.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociationId");

                    b.Property<int?>("AssociationId1");

                    b.Property<int?>("FlatForeignKey");

                    b.Property<bool>("IsAssociationMember");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumbers");

                    b.HasKey("Id");

                    b.HasIndex("AssociationId");

                    b.HasIndex("AssociationId1");

                    b.HasIndex("FlatForeignKey");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DashBoard.Models.ParkingLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey")
                        .IsUnique()
                        .HasFilter("[CommunityForeignKey] IS NOT NULL");

                    b.ToTable("ParkingLayouts");
                });

            modelBuilder.Entity("DashBoard.Models.ParkingSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlockId");

                    b.Property<int>("CommunityId");

                    b.Property<int?>("FlatForeignKey");

                    b.Property<string>("FloorName");

                    b.Property<string>("Number");

                    b.Property<int?>("ParkingLayoutId");

                    b.HasKey("Id");

                    b.HasIndex("FlatForeignKey");

                    b.HasIndex("ParkingLayoutId");

                    b.ToTable("ParkingSlots");
                });

            modelBuilder.Entity("DashBoard.Models.PersonalHelper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FlatForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.HasIndex("FlatForeignKey");

                    b.ToTable("PersonalHelpers");
                });

            modelBuilder.Entity("DashBoard.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DashBoard.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("RegionForeignKey");

                    b.Property<int>("Zone");

                    b.HasKey("Id");

                    b.HasIndex("RegionForeignKey");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("DashBoard.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<int?>("FlatForeignKey");

                    b.Property<string>("Number");

                    b.Property<string>("VehicleType");

                    b.HasKey("Id");

                    b.HasIndex("FlatForeignKey");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DashBoard.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommunityForeignKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Pupose");

                    b.Property<DateTime>("Schedule");

                    b.HasKey("Id");

                    b.HasIndex("CommunityForeignKey");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("DashBoard.Models.Address", b =>
                {
                    b.HasOne("DashBoard.Models.GateKeeper", "GateKeeper")
                        .WithOne("Address")
                        .HasForeignKey("DashBoard.Models.Address", "GateKeeperForeignKey");

                    b.HasOne("DashBoard.Models.PersonalHelper", "PersonalHelper")
                        .WithOne("ContactDetails")
                        .HasForeignKey("DashBoard.Models.Address", "PersonalHelperForeignKey");

                    b.HasOne("DashBoard.Models.Vendor", "Vendor")
                        .WithOne("Address")
                        .HasForeignKey("DashBoard.Models.Address", "VendorForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.AmcItem", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("AmcItems")
                        .HasForeignKey("CommunityForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Amenety", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("Ameneties")
                        .HasForeignKey("CommunityForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Association", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithOne("Association")
                        .HasForeignKey("DashBoard.Models.Association", "CommunityForeignKey");

                    b.HasOne("DashBoard.Models.Member", "President")
                        .WithMany()
                        .HasForeignKey("PresidentId");

                    b.HasOne("DashBoard.Models.Member", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId");
                });

            modelBuilder.Entity("DashBoard.Models.Block", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("Blocks")
                        .HasForeignKey("CommunityForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Community", b =>
                {
                    b.HasOne("DashBoard.Models.Section", "Section")
                        .WithMany("Communities")
                        .HasForeignKey("SectionForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Flat", b =>
                {
                    b.HasOne("DashBoard.Models.Block", "Block")
                        .WithMany("Flats")
                        .HasForeignKey("BlockForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.GateKeeper", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("Gatekeeping")
                        .HasForeignKey("CommunityForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Member", b =>
                {
                    b.HasOne("DashBoard.Models.Association")
                        .WithMany("AssociationMembers")
                        .HasForeignKey("AssociationId");

                    b.HasOne("DashBoard.Models.Association")
                        .WithMany("Treasurers")
                        .HasForeignKey("AssociationId1");

                    b.HasOne("DashBoard.Models.Flat", "Flat")
                        .WithMany("FlatMembers")
                        .HasForeignKey("FlatForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.ParkingLayout", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithOne("ParkingLayout")
                        .HasForeignKey("DashBoard.Models.ParkingLayout", "CommunityForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.ParkingSlot", b =>
                {
                    b.HasOne("DashBoard.Models.Flat", "Flat")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("FlatForeignKey");

                    b.HasOne("DashBoard.Models.ParkingLayout")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("ParkingLayoutId");
                });

            modelBuilder.Entity("DashBoard.Models.PersonalHelper", b =>
                {
                    b.HasOne("DashBoard.Models.Flat", "Flat")
                        .WithMany("Helpers")
                        .HasForeignKey("FlatForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Section", b =>
                {
                    b.HasOne("DashBoard.Models.Region", "Region")
                        .WithMany("Sections")
                        .HasForeignKey("RegionForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Vehicle", b =>
                {
                    b.HasOne("DashBoard.Models.Flat", "Flat")
                        .WithMany("Vehicles")
                        .HasForeignKey("FlatForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Vendor", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("Vendors")
                        .HasForeignKey("CommunityForeignKey");
                });
#pragma warning restore 612, 618
        }
    }
}
